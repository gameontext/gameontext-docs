<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Application Architecture on Game On! Adventures with microservices</title><link>/architecture/</link><description>Recent content in Application Architecture on Game On! Adventures with microservices</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 Mar 2020 17:29:15 -0500</lastBuildDate><atom:link href="/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Core services</title><link>/architecture/core-services.html</link><pubDate>Wed, 08 Nov 2023 18:24:05 -0500</pubDate><guid>/architecture/core-services.html</guid><description>AuthAuth is a very small lightweight authentication system. It allows players to connect and identify themselves via a selected "social login". We assume that the client (JavaScript running on a device outside of our environment) is not secure, so player authentication using OAuth is initiated by the Player service, rather than by the client/webapp.
This service used to be part of the Player service, when we considered the Player service to be looking after all things related to the Player.</description></item><item><title>Platform services</title><link>/architecture/platform-services.html</link><pubDate>Wed, 08 Nov 2023 18:24:05 -0500</pubDate><guid>/architecture/platform-services.html</guid><description>Amalgam8 services.Amalgam8 supplies us a Registry, and a Controller, via which it implements the Service Discovery, and Service Proxying that we make use of in our core services.
Kafka/MessageHubWe have started adding event driven processing to the Game On core services, and Kafka (also used by Amalgam8) is our chosen Publish/Subscribe solution.
etcdEtcd was added to simplify configuration management. There are many ways to slice this particular onion, but the important thing for us was being able to see the configuration attributes used, and in some cases shared, by our core services in a central place.</description></item><item><title>Other services</title><link>/architecture/other-services.html</link><pubDate>Wed, 08 Nov 2023 18:24:05 -0500</pubDate><guid>/architecture/other-services.html</guid><description>SwaggerA simple process that serves the swagger UI with our swagger API documents.
Room implementationsWe have a few room implementations defined within our repositories.
SimpleRoom&amp;#8201;&amp;#8211;&amp;#8201;foundation for the Java-based walkthroughNode.js room&amp;#8201;&amp;#8211;&amp;#8201;foundation for the JavaScript walkthroughGo room&amp;#8201;&amp;#8211;&amp;#8201;foundation for the Go walkthroughThe RecRoom and Basement&amp;#8201;&amp;#8211;&amp;#8201;two related rooms, one of which has itemsThe Map room&amp;#8201;&amp;#8211;&amp;#8201;uses the Map&amp;#8217;s API to display a map of all registered rooms For most of them, a single service is providing a single room.</description></item><item><title>WebSocket Protocol</title><link>/architecture/websocket-protocol.html</link><pubDate>Wed, 08 Nov 2023 18:24:05 -0500</pubDate><guid>/architecture/websocket-protocol.html</guid><description>WebSockets are currently used for two-way asynchronous communication between the Client (the player&amp;#8217;s web browser) and the Mediator, and between the Mediator and a Room. The Mediator is playing man-in-the-middle, and the goal is to allow as much message routing as possible to happen without requiring the Mediator to look at the JSON data.
The protocol used by Game On! is text (rather than binary), and uses a simple comma-delimited header followed by a JSON payload, just,like,{"</description></item><item><title>Application Security</title><link>/architecture/application-security.html</link><pubDate>Wed, 08 Nov 2023 18:24:05 -0500</pubDate><guid>/architecture/application-security.html</guid><description>Game On! has the following general security requirements
Identify the user.Prevent data alteration in transit.Prevent replay attacks. We satisfy these requirements using a combination of OAuth protocols, JSON Web Tokens (JWTs) and API keys.
OAuth and OpenID Connect for Player IdentificationWhile the game has a notion of a Player, we decided to opt-out of the password management business. Game On! relies on third-parties for user identification. When you play the game, you authenticate with an OAuth provider (Facebook, GitHub, Google, Twitter).</description></item><item><title>The Map</title><link>/architecture/map.html</link><pubDate>Wed, 08 Nov 2023 18:24:05 -0500</pubDate><guid>/architecture/map.html</guid><description>The Map is one of the game&amp;#8217;s core services. It is implemented in Java using WebSphere Liberty. The source is available on GitHub. The public REST API is browsable with Swagger. What follows is a very description of how the internals of the map service work.
API, Language, and RuntimeThe Map is a Java-based service. It uses Java 8, and relies on Java EE 7 technologies like JAX-RS 2.0.
We built the Map using WebSphere Liberty, in a Swagger-first manner using Liberty&amp;#8217;s apiDiscovery-1.</description></item><item><title>The Sweep</title><link>/architecture/the-sweep.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/architecture/the-sweep.html</guid><description/></item></channel></rss>