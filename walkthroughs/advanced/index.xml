<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced Adventures on Game On! Adventures with microservices</title><link>/walkthroughs/advanced/</link><description>Recent content in Advanced Adventures on Game On! Adventures with microservices</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 Mar 2020 17:29:15 -0500</lastBuildDate><atom:link href="/walkthroughs/advanced/index.xml" rel="self" type="application/rss+xml"/><item><title>Enhancing a room with items</title><link>/walkthroughs/advanced/room-items.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/room-items.html</guid><description>Where we learn about how to add items to your room.
OverviewThis adventure teaches you about adding virtual items to your room in Game On, taking you through understanding the required parts of the protocol and some ideas on how to handle commands. You&amp;#8217;ll learn how to have items show up in your Room Description and how to support simple commands that interact with them.
Why Virtual Items?Game On presents itself to users as a text-based adventure game.</description></item><item><title>Communication with REST &amp; JAX-RS</title><link>/walkthroughs/advanced/jaxrs-rest.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/jaxrs-rest.html</guid><description>Where we learn how to talk to Map via REST &amp;amp; JAX-RS
OverviewIn this adventure, we&amp;#8217;ll learn about the Representational State Transfer (REST) approach for defining services. We&amp;#8217;ll explore how the JAX-RS specification simplifies working with REST endpoints by adding simple client capabilities to a Game On room.
Why REST ?REST has become pervasive as a way to communicate between services, defining an easy and simple way to invoke an action against a remote endpoint.</description></item><item><title>NoSQL persistance with Cloudant</title><link>/walkthroughs/advanced/cloudant.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/cloudant.html</guid><description>Where we learn about Persistence via Cloudant.
OverviewThis adventure will take you through the basics of Persistence from a Microservice perspective, using Cloudant as your backing database. You will add simple usage of Cloudant to a Game On room, and will learn about configuring a Cloudant service instance, communicating with it, and how you might use this further within a room.
Why Cloudant ?There are many options for persistence in a microservices architecture, including nosql db&amp;#8217;s, graph db&amp;#8217;s, and regular sql db&amp;#8217;s.</description></item><item><title>JSR-107 Caching</title><link>/walkthroughs/advanced/jsr107-caching.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/jsr107-caching.html</guid><description>Where we learn about Caching, the standards-based way.
OverviewIn this adventure, we&amp;#8217;ll learn about Caching, and will walk through adding Caching support via JSR-107 annotations to a Java-based Game On room.
By the end, we hope you&amp;#8217;ll have an understanding of the value and use that Caching technologies bring to Cloud Native applications and microservices. We&amp;#8217;ll leave you with some suggestions for further improvements to your room, so you can continue to explore the concepts.</description></item><item><title>JSR-107 Caching (Part Two!)</title><link>/walkthroughs/advanced/jsr107-caching-2.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/jsr107-caching-2.html</guid><description>Where we learn that JSR-107 isn&amp;#8217;t just about annotations.
OverviewThis adventure will teach you a little of the JSR-107 API, by walking you through adding a simple item with shared state to a Game On room.
You will come away understanding how to use JSR-107 without the annotations, with additional suggestions for how this could be used further within a room.
Why JSR-107 API?As mentioned over in Part One JSR-107 is an effort to standardise a Java API for Caching.</description></item><item><title>Watson Conversation Service</title><link>/walkthroughs/advanced/watson-conversation.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/watson-conversation.html</guid><description>Where we learn how to integrate Watson Conversation service with a Swift chat room.
OverviewThis adventure will teach you about integrating a Watson Conversation service into your Swift room by walking you through the process of creating your own Watson service in Bluemix and adding integration points to a GameOn room. You will come away having learned a little about using Watson services and there will be suggestions for how you can use this further within a room.</description></item><item><title>Logging using the ELK stack</title><link>/walkthroughs/advanced/elk-stack.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/elk-stack.html</guid><description>Once you&amp;#8217;ve created a room, the next thing you&amp;#8217;ll want to do is figure out how to send the room&amp;#8217;s logs somewhere so that when your room is stopped (and its local filesystem disappears) you don&amp;#8217;t lose your diagnostic data. You also will want to be able to view your logs, and other events, from a dashboard to make it easy to find problems without having to look at each room&amp;#8217;s files one at a time.</description></item><item><title>Istio and Kubernetes</title><link>/walkthroughs/advanced/istio.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/istio.html</guid><description>RequirementsDownload and install the latest Istio releaseAdd Istio to the Kubernetes clusterBring up Game On! with injected sidecarsIn this adventure, we&amp;#8217;ll add Istio to the Kubernetes cluster running our core game services, to see what it does and how it works. So we don&amp;#8217;t make a mess of our configration with, and without, Istio, we&amp;#8217;ll be using automatic sidecar injection.
RequirementsA cluster configured and working with GO!, per Running with Kubernetes</description></item><item><title>Testing Social Login apps</title><link>/walkthroughs/advanced/test-sso-login.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/test-sso-login.html</guid><description>OverviewHow does this work ?Why do I need my own Social Login apps ?Adding your own Social Login app (Facebook).How to create your own Social Login app, and configure it to use with the game locally.
OverviewHow does this work ?Why do I need my own Social Login apps ?Adding your own Social Login app (Facebook). OverviewWhat&amp;#8217;s a Social Login App? I thought this section was for Game On?
Game On allows players to identify themselves via third party services, such as Facebook, Twitter, etc.</description></item><item><title>Create a room from scratch</title><link>/walkthroughs/advanced/room-from-scratch.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/room-from-scratch.html</guid><description>Where we learn about the things a room must be, to be a room.
OverviewThis adventure will teach you about the responsibilities a room has from a protocol perspective within Game On. This information will be handy if you are looking to understand what makes a room a room, or if you are planning on creating your own room from scratch in a language we haven&amp;#8217;t provided a sample for. (If you do create one, we&amp;#8217;d be happy to fork from your repo and offer it as the official sample for a Game On room in that language).</description></item></channel></rss>