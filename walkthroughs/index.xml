<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Extending the game on Game On! Adventures with microservices</title><link>/walkthroughs/</link><description>Recent content in Extending the game on Game On! Adventures with microservices</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 Mar 2020 17:29:15 -0500</lastBuildDate><atom:link href="/walkthroughs/index.xml" rel="self" type="application/rss+xml"/><item><title>Register your Room</title><link>/walkthroughs/register-room.html</link><pubDate>Wed, 08 Nov 2023 18:24:05 -0500</pubDate><guid>/walkthroughs/register-room.html</guid><description>Game On! is relies on a variant of a WebHook to allow the core game to find your service. Part of registering a room is providing a publicly reachable endpoint (a WebHook) that follows the Room API (primarily the WebSocket protocol), as well as other factors like unique room names and descriptions, or the presence of customized items or commands.
Note: Room registration is long-lived: the registration for your room will persist until you delete it.</description></item><item><title>Create a Room service</title><link>/walkthroughs/create-room.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/create-room.html</guid><description>Why are there WebSockets again?Visits from the SweepLet&amp;#8217;s get started!This game was built to give you reasons to try things, to make it easier (or more interesting) for you to learn the hard way.
Creating a simple microservice that provides a room can take as little as 15 minutes. A simple service must provide a publicly reachable WebSocket endpoint that satisfies the WebSocket protocol, and that&amp;#8217;s it for a basic, functional room.</description></item><item><title>Deploy your room service</title><link>/walkthroughs/deploy-room.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/deploy-room.html</guid><description>Your room needs a publicly reachable endpoint for people to visit it.
This could mean running your room as a traditional server on any old hosting service. But as we&amp;#8217;re playing with cloud native applications and microservices, we should try deploying our service to a Cloud provider.</description></item><item><title>Eclipse and WDT</title><link>/walkthroughs/eclipse-and-wdt.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/eclipse-and-wdt.html</guid><description>We are using Liberty as the server runtime and Eclipse as the IDE with WebSphere development tools (WDT) to enable iterative development with incremental publish. We are big fans of these tools because they&amp;#8217;re very efficient: no build, repackage, or restart steps are required before your changes are live in the server.
Getting this setup to work with our Docker images does require some first-time set up, but after that, it&amp;#8217;s smooth sailing for development.</description></item></channel></rss>