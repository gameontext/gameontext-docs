<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Running core services locally on Game On! Adventures with microservices</title><link>/walkthroughs/core/</link><description>Recent content in Running core services locally on Game On! Adventures with microservices</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 Mar 2020 17:29:15 -0500</lastBuildDate><atom:link href="/walkthroughs/core/index.xml" rel="self" type="application/rss+xml"/><item><title>Git</title><link>/walkthroughs/core/git.html</link><pubDate>Mon, 12 Oct 2020 17:10:28 -0400</pubDate><guid>/walkthroughs/core/git.html</guid><description>References for using GitSafety precautions for using git with submodulesSigning CommitsOther useful aliases xkcd: Git We use submodules to facilitate grabbing all the core servies in one fell swoop.
References for using GitSafety precautions for using git with submodulesSigning CommitsOther useful aliases Yes, yes we know, Git Submodules are not a cake walk. But we believe the convenience of being able to grab the set of core services as a whole is worth it.</description></item><item><title>Running with Docker Compose</title><link>/walkthroughs/core/local-docker.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/core/local-docker.html</guid><description>RequirementsStarting game services locallyFiles supporting Docker ComposeConfigurationSSH Keys and KeyStoresRebuilding Core Game services with Docker ComposeIterative development of Java applications with WDTDetermining the host IP address (Docker Toolbox)Requirementsdocker-compose version 1.15.0 or greater. Installation instructions vary by platform. Starting game services locallyObtain the source for the root project (gameontext/gameon)HTTPS: git clone https://github.com/gameontext/gameon.gitSSH: git clone git@github.com:gameontext/gameon.gitChange to the gameon directory
$ cd gameonSetup your environment (one time, see below).
$ ./go-admin.sh choose # choose Docker Compose $ eval $(.</description></item><item><title>Running with Kubernetes</title><link>/walkthroughs/core/local-kubernetes.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/core/local-kubernetes.html</guid><description>RequirementsStarting game services locallyFiles supporting KubernetesConfigurationRebuilding Core Game services with KubernetesRequirementsDockerKubernetes version 1.9 or greater:[kubectl]A configured Kubernetes clusterhelm (optional) Starting game services locallyObtain the source for the root project (gameontext/gameon)HTTPS: git clone https://github.com/gameontext/gameon.gitSSH: git clone git@github.com:gameontext/gameon.gitChange to the gameon directory
$ cd gameonSetup your environment (one time, see below).
$ ./go-admin.sh choose # choose Docker Compose $ eval $(./go-admin.sh env) # set script aliases $ alias go-run # confirm `docker/go-run.sh`Set up core game services (repeatable):</description></item><item><title>Working with Game On! Locally</title><link>/walkthroughs/core/local-build.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/core/local-build.html</guid><description>Developing and testing your room locally in a production-like environment is an important aspect of Twelve factor applications, as it reduces the likelihood that what you create locally will fail in new and unexpected ways when activated in production.
Game On! is a containerized application that uses replaceable backing services that can also run locally in containers (sometimes with minor substitutions, as we&amp;#8217;ll see). We like this for two reasons: 1) we can directly see what happens when we prod things with a stick, and 2) we can be much more destructive with local copies without worrying about messing something up.</description></item></channel></rss>