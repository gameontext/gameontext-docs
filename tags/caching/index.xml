<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>caching on Game On! Adventures with microservices</title><link>/tags/caching.html</link><description>Recent content in caching on Game On! Adventures with microservices</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="/tags/caching/index.xml" rel="self" type="application/rss+xml"/><item><title>Using JSR-107 Caching in Java-based rooms</title><link>/2017/03/06/jsr107-caching.html</link><pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate><guid>/2017/03/06/jsr107-caching.html</guid><description>Caching is one of those awkward bits of function you can totally avoid adding when first creating a bit of code. Everything will work just fine during your initial testing, but worries start to creep in when you start to consider what happens when running at scale: will remote services be invoked too frequently? And what happens to session data when processes are added or removed to accommodate changes in load?</description></item></channel></rss>