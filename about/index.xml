<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exploring Microservices — Game On! on Game On! Adventures with microservices</title><link>/about/</link><description>Recent content in Exploring Microservices — Game On! on Game On! Adventures with microservices</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Feb 2020 20:08:20 -0500</lastBuildDate><atom:link href="/about/index.xml" rel="self" type="application/rss+xml"/><item><title>How to play</title><link>/about/game_play.html</link><pubDate>Tue, 03 Mar 2020 16:27:08 -0500</pubDate><guid>/about/game_play.html</guid><description>Games are meant to be played!
Players just want to have fun. There may be puzzles to solve, riddles to answer, cryptic speech to decipher, whatever! Every room will be different, but will follow the following consistent interaction patterns.
ContentsNavigation and common commandsFirst RoomUser profileRoom management Navigation and common commandsSome commands will always be available. Those that are implemented by core game services (namely the Mediator) will also always behave the same.</description></item><item><title>The Twelve-Factor Application</title><link>/about/twelve-factors.html</link><pubDate>Tue, 03 Mar 2020 16:27:08 -0500</pubDate><guid>/about/twelve-factors.html</guid><description>OverviewAre there best practices for creating microservices?
The twelve-factor application methodology is one frequently referenced approach. It defines twelve factors that services should follow to build portable, resilient applications for cloud environments (SaaS). To quote, twelve-factor applications:
Use declarative formats for setup automation, to minimize time and cost for new developers joining the project;Have a clean contract with the underlying operating system, offering maximum portability between execution environments;Are suitable for deployment on modern cloud platforms, obviating the need for servers and systems administration;Minimize divergence between development and production, enabling continuous deployment for maximum agility;And can scale up without significant changes to tooling, architecture, or development practices.</description></item></channel></rss>