<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Game On! Adventures with microservices</title><link>/</link><description>Recent content in Home on Game On! Adventures with microservices</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Apr 2021 19:32:54 -0400</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>How to play</title><link>/about/game_play.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/about/game_play.html</guid><description>Games are meant to be played!
Players just want to have fun. There may be puzzles to solve, riddles to answer, cryptic speech to decipher, whatever! Every room will be different, but will follow the following consistent interaction patterns.
ContentsNavigation and common commandsFirst RoomUser profileRoom management Navigation and common commandsSome commands will always be available. Those that are implemented by core game services (namely the Mediator) will also always behave the same.</description></item><item><title>The First Pass</title><link>/chronicles/1-first-pass.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/1-first-pass.html</guid><description>Our first attempt was typical stand-things-up-in-a hurry hacking. This was a bit of a hybrid: we did start this as separate runtime services, but they were built in more monolithic chunks.
At this early early stage, it was a bunch of us (Java developers) standing these services up on our local machines. We were able to share code (thank you git), but relied on gradle and and local WDT dev/test environments to make progress without having these services deployed out into cloud-space.</description></item><item><title>The Twelve-Factor Application</title><link>/about/twelve-factors.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/about/twelve-factors.html</guid><description>OverviewAre there best practices for creating microservices?
The twelve-factor application methodology is one frequently referenced approach. It defines twelve factors that services should follow to build portable, resilient applications for cloud environments (SaaS). To quote, twelve-factor applications:
Use declarative formats for setup automation, to minimize time and cost for new developers joining the project;Have a clean contract with the underlying operating system, offering maximum portability between execution environments;Are suitable for deployment on modern cloud platforms, obviating the need for servers and systems administration;Minimize divergence between development and production, enabling continuous deployment for maximum agility;And can scale up without significant changes to tooling, architecture, or development practices.</description></item><item><title>Automation! Clouds!</title><link>/chronicles/2-cloud-automation.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/2-cloud-automation.html</guid><description>Automated build pipelines arrived! and Docker containers out in the cloud! Thankfully for those of us doing most of the dev work, the creation, testing of the delivery pipeline was pretty transparent. The build pipeline is triggered by a commit to the master branches of our repositories, which means no change to our usual workflow.
A proxy was added to help route requests between the services and docker containers, and to give us a seamless domain space (gameontext.</description></item><item><title>Freeing the Front-End</title><link>/chronicles/3-web-front-end.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/3-web-front-end.html</guid><description>We have a few Kate&amp;#8217;s on the team, and one of them is an avowed FED (that&amp;#8217;s a Front-End Developer, not a federal employee). She was happy to work on improving our front end web application, but really, she couldn&amp;#8217;t care less about Java. We realized, in fact, that there was no good reason to keep making her care about Java.
We therefore split the web stuff into its own (small, simple) container, using nginx to serve the static content.</description></item><item><title>Something other than Java!</title><link>/chronicles/4-polyglot.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/4-polyglot.html</guid><description>Our team has nothing against JavaScript, but Java is what we know. When attempting something big and new, we felt it was a good idea to constrain the number of moving parts in the air. In this case, we stuck with a language we were familiar with for the first core services.
The Node.js room brought JavaScipt to the backend. More will follow.</description></item><item><title>Show the API</title><link>/chronicles/5-swagger.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/5-swagger.html</guid><description>Swagger documentation!
Player and Concierge both have a REST API, and the Swagger container hosts and serves the document that presents both APIs together in one view.
The bulk of the traffic flowing around in the game is over WebSockets, and that is difficult for Swagger to document. For those interested in the real low-level details, we wrote down and iterated on the WebSocket protocol in a Box note. The result is documented here.</description></item><item><title>Git</title><link>/walkthroughs/core/git.html</link><pubDate>Mon, 12 Oct 2020 17:10:28 -0400</pubDate><guid>/walkthroughs/core/git.html</guid><description>References for using GitSafety precautions for using git with submodulesSigning CommitsOther useful aliases xkcd: Git We use submodules to facilitate grabbing all the core servies in one fell swoop.
References for using GitSafety precautions for using git with submodulesSigning CommitsOther useful aliases Yes, yes we know, Git Submodules are not a cake walk. But we believe the convenience of being able to grab the set of core services as a whole is worth it.</description></item><item><title>Breaking down the Player service</title><link>/chronicles/6-player-explodes.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/6-player-explodes.html</guid><description>Over time, the Player service, which was filling multiple roles, felt more and more out of place. It was already cut down once, when we moved the webapp out, but as we resolved some websocket traffic management issues in the mediator, it became clear that we had two very different work patterns within the same service, one dealing only with CRUD operations, and one wielding data flowing over long-running connections. The two workloads have fundamentally different behaviors and scaling characteristics, and should not be housed in the same service.</description></item><item><title>Create a Room service</title><link>/walkthroughs/create-room.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/create-room.html</guid><description>Why are there WebSockets again?Visits from the SweepLet&amp;#8217;s get started!This game was built to give you reasons to try things, to make it easier (or more interesting) for you to learn the hard way.
Creating a simple microservice that provides a room can take as little as 15 minutes. A simple service must provide a publicly reachable WebSocket endpoint that satisfies the WebSocket protocol, and that&amp;#8217;s it for a basic, functional room.</description></item><item><title>Deploy your room service</title><link>/walkthroughs/deploy-room.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/deploy-room.html</guid><description>Your room needs a publicly reachable endpoint for people to visit it.
This could mean running your room as a traditional server on any old hosting service. But as we&amp;#8217;re playing with cloud native applications and microservices, we should try deploying our service to a Cloud provider.</description></item><item><title>Eclipse and WDT</title><link>/walkthroughs/eclipse-and-wdt.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/eclipse-and-wdt.html</guid><description>We are using Liberty as the server runtime and Eclipse as the IDE with WebSphere development tools (WDT) to enable iterative development with incremental publish. We are big fans of these tools because they&amp;#8217;re very efficient: no build, repackage, or restart steps are required before your changes are live in the server.
Getting this setup to work with our Docker images does require some first-time set up, but after that, it&amp;#8217;s smooth sailing for development.</description></item><item><title>Register your Room</title><link>/walkthroughs/register-room.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/register-room.html</guid><description>Game On! is relies on a variant of a WebHook to allow the core game to find your service. Part of registering a room is providing a publicly reachable endpoint (a WebHook) that follows the Room API (primarily the WebSocket protocol), as well as other factors like unique room names and descriptions, or the presence of customized items or commands.
Note: Room registration is long-lived: the registration for your room will persist until you delete it.</description></item><item><title>Running with Docker Compose</title><link>/walkthroughs/core/local-docker.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/core/local-docker.html</guid><description>RequirementsStarting game services locallyFiles supporting Docker ComposeConfigurationSSH Keys and KeyStoresRebuilding Core Game services with Docker ComposeIterative development of Java applications with WDTDetermining the host IP address (Docker Toolbox)Requirementsdocker-compose version 1.15.0 or greater. Installation instructions vary by platform. Starting game services locallyObtain the source for the root project (gameontext/gameon)HTTPS: git clone https://github.com/gameontext/gameon.gitSSH: git clone git@github.com:gameontext/gameon.gitChange to the gameon directory
$ cd gameonSetup your environment (one time, see below).
$ ./go-admin.sh choose # choose Docker Compose $ eval $(.</description></item><item><title>Running with Kubernetes</title><link>/walkthroughs/core/local-kubernetes.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/core/local-kubernetes.html</guid><description>RequirementsStarting game services locallyFiles supporting KubernetesConfigurationRebuilding Core Game services with KubernetesRequirementsDockerKubernetes version 1.9 or greater:[kubectl]A configured Kubernetes clusterhelm (optional) Starting game services locallyObtain the source for the root project (gameontext/gameon)HTTPS: git clone https://github.com/gameontext/gameon.gitSSH: git clone git@github.com:gameontext/gameon.gitChange to the gameon directory
$ cd gameonSetup your environment (one time, see below).
$ ./go-admin.sh choose # choose Docker Compose $ eval $(./go-admin.sh env) # set script aliases $ alias go-run # confirm `docker/go-run.sh`Set up core game services (repeatable):</description></item><item><title>Working with Game On! Locally</title><link>/walkthroughs/core/local-build.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/core/local-build.html</guid><description>Developing and testing your room locally in a production-like environment is an important aspect of Twelve factor applications, as it reduces the likelihood that what you create locally will fail in new and unexpected ways when activated in production.
Game On! is a containerized application that uses replaceable backing services that can also run locally in containers (sometimes with minor substitutions, as we&amp;#8217;ll see). We like this for two reasons: 1) we can directly see what happens when we prod things with a stick, and 2) we can be much more destructive with local copies without worrying about messing something up.</description></item><item><title>Config management</title><link>/chronicles/7-etcd.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/7-etcd.html</guid><description>So, at this point, we had a good fistful of services going through deployment pipelines, and we were fresh from the effort of adding a new one (for mediator). Managing environment variables across several build pipelines is a pain: lots of clicking lots of boxes to get to lots of little perfect UI views.
We moved runtime environment variables particular to our production docker environment out into etcd. This simplified what we needed to configure in our build pipelines, and made it easier for containers to pick up new values when they were restarted (no dynamic reconfiguration yet).</description></item><item><title>Buh-bye to Concierge!</title><link>/chronicles/8-bye-concierge.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/8-bye-concierge.html</guid><description>Concierge was such a cute service! It was supposed to help players find their way from room to room. But it&amp;#8217;s name was confusing (was it a map or a traffic director?). It&amp;#8217;s interaction pattern with mediator also introduced a single point of failure: if the Concierge was down, the Players were pretty much stuck wherever they were, with a fallback to First Room.
We designed a new Map service, with a much better API for adding and removing rooms from the map.</description></item><item><title>Authorized operations</title><link>/chronicles/9-map-auth-hmac.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/9-map-auth-hmac.html</guid><description>We added signed header-based security to the Map service APIs.
Adding security after the fact is a bad idea. Just sayin'. We managed it, but it was messy, and required coordinated rollouts across our services to get the support for Signed JWTs and signed HMACs working the way we wanted.
The shared library we built for managing signature verification did make this easier for Java.</description></item><item><title>Core services</title><link>/architecture/core-services.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/architecture/core-services.html</guid><description>AuthAuth is a very small lightweight authentication system. It allows players to connect and identify themselves via a selected "social login". We assume that the client (JavaScript running on a device outside of our environment) is not secure, so player authentication using OAuth is initiated by the Player service, rather than by the client/webapp.
This service used to be part of the Player service, when we considered the Player service to be looking after all things related to the Player.</description></item><item><title>Enhancing a room with items</title><link>/walkthroughs/advanced/room-items.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/room-items.html</guid><description>Where we learn about how to add items to your room.
OverviewThis adventure teaches you about adding virtual items to your room in Game On, taking you through understanding the required parts of the protocol and some ideas on how to handle commands. You&amp;#8217;ll learn how to have items show up in your Room Description and how to support simple commands that interact with them.
Why Virtual Items?Game On presents itself to users as a text-based adventure game.</description></item><item><title>More Rooms!</title><link>/chronicles/10-more-rooms.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/10-more-rooms.html</guid><description>Rooms written in Go, another room in JavaScript, and two more in Java. We learned lots as other people were able to try adding their own rooms, especially as some of them were trying to build their rooms while the Map/Concierge switch was in flight. Ouch.
In the end, I realize that my experience was different from what a new developer today would experience. We were building on shifting sand, they will be building on a more stable API set.</description></item><item><title>Platform services</title><link>/architecture/platform-services.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/architecture/platform-services.html</guid><description>Amalgam8 services.Amalgam8 supplies us a Registry, and a Controller, via which it implements the Service Discovery, and Service Proxying that we make use of in our core services.
Kafka/MessageHubWe have started adding event driven processing to the Game On core services, and Kafka (also used by Amalgam8) is our chosen Publish/Subscribe solution.
etcdEtcd was added to simplify configuration management. There are many ways to slice this particular onion, but the important thing for us was being able to see the configuration attributes used, and in some cases shared, by our core services in a central place.</description></item><item><title>Swept away...</title><link>/chronicles/11-the-sweep.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/11-the-sweep.html</guid><description>Our first non-player character! The Sweep is in early days, so we don&amp;#8217;t know in what directions it will grow, but it will serve an important function: keeping the map alive and vital by pruning sick rooms.</description></item><item><title>Other services</title><link>/architecture/other-services.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/architecture/other-services.html</guid><description>SwaggerA simple process that serves the swagger UI with our swagger API documents.
Room implementationsWe have a few room implementations defined within our repositories.
SimpleRoom&amp;#8201;&amp;#8211;&amp;#8201;foundation for the Java-based walkthroughNode.js room&amp;#8201;&amp;#8211;&amp;#8201;foundation for the JavaScript walkthroughGo room&amp;#8201;&amp;#8211;&amp;#8201;foundation for the Go walkthroughThe RecRoom and Basement&amp;#8201;&amp;#8211;&amp;#8201;two related rooms, one of which has itemsThe Map room&amp;#8201;&amp;#8211;&amp;#8201;uses the Map&amp;#8217;s API to display a map of all registered rooms For most of them, a single service is providing a single room.</description></item><item><title>Rec Room Gets the Cold Shoulder</title><link>/chronicles/12-room-isolation.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/12-room-isolation.html</guid><description>Go on Now, Go! Walk out the Door.. (don&amp;#8217;t turn around, now&amp;#8230;&amp;#8203;)
As user-created rooms were added to the Map, we started thinking about treating our rooms like everybody else&amp;#8217;s. Up until this point, our rooms have cheated (a little), as they&amp;#8217;ve been able to directly talk to the core services. But no more! For we have kicked the rooms out of the core services club, and told them they can no longer be members.</description></item><item><title>Auth Goes Its Own Way</title><link>/chronicles/13-auth-service.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/13-auth-service.html</guid><description>Remember way back in the beginning when we had only 3 services total and the Player service did all the things that ever needed to be done regarding players? Well, "all the things" included interacting with Social Login services to authenticate the Player and issue an access token (JWT).
As we grew to support additional Social Login services, the dependency management for Player become problematic. 3rd party libraries would require dependencies that would conflict with others required by our core Player entity store function.</description></item><item><title>WebSocket Protocol</title><link>/architecture/websocket-protocol.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/architecture/websocket-protocol.html</guid><description>WebSockets are currently used for two-way asynchronous communication between the Client (the player&amp;#8217;s web browser) and the Mediator, and between the Mediator and a Room. The Mediator is playing man-in-the-middle, and the goal is to allow as much message routing as possible to happen without requiring the Mediator to look at the JSON data.
The protocol used by Game On! is text (rather than binary), and uses a simple comma-delimited header followed by a JSON payload, just,like,{"</description></item><item><title>Application Security</title><link>/architecture/application-security.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/architecture/application-security.html</guid><description>Game On! has the following general security requirements
Identify the user.Prevent data alteration in transit.Prevent replay attacks. We satisfy these requirements using a combination of OAuth protocols, JSON Web Tokens (JWTs) and API keys.
OAuth and OpenID Connect for Player IdentificationWhile the game has a notion of a Player, we decided to opt-out of the password management business. Game On! relies on third-parties for user identification. When you play the game, you authenticate with an OAuth provider (Facebook, GitHub, Google, Twitter).</description></item><item><title>Pandemonium! Events!</title><link>/chronicles/14-events.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/14-events.html</guid><description>There are some things in the game that really aren&amp;#8217;t good to handle with REST APIs. Reacting to events is a much more efficient way of propagating changes through the system. For example, when a player changes their name via the Player service, that change should ripple out to all interested parties so that interactions across devices can be updated with the new username.
We decided to try using Kafka, or, when we run in BlueMix, MessageHub (which has a Kafka interface, so essentially it&amp;#8217;s still Kafka to us).</description></item><item><title>Communication with REST &amp; JAX-RS</title><link>/walkthroughs/advanced/jaxrs-rest.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/jaxrs-rest.html</guid><description>Where we learn how to talk to Map via REST &amp;amp; JAX-RS
OverviewIn this adventure, we&amp;#8217;ll learn about the Representational State Transfer (REST) approach for defining services. We&amp;#8217;ll explore how the JAX-RS specification simplifies working with REST endpoints by adding simple client capabilities to a Game On room.
Why REST ?REST has become pervasive as a way to communicate between services, defining an easy and simple way to invoke an action against a remote endpoint.</description></item><item><title>Marco! Polo! (Service registration and discovery)</title><link>/chronicles/15-service-discovery.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/15-service-discovery.html</guid><description>An item long on our wishlist was to stop having hardcoded endpoint urls (passed in as environment variables) for our services. We know it isn&amp;#8217;t nice, and it makes it harder to scale service instances without adding intermediate proxies all over the place.
We&amp;#8217;re using Amalgam8 (A8) for it&amp;#8217;s service discovery and service proxying abilities. Amalgam8 uses sidecars to manage service registration and discovery. Programmable load balancing and routing is provided via an in-container outbound proxy to other services.</description></item><item><title>The Map</title><link>/architecture/map.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/architecture/map.html</guid><description>The Map is one of the game&amp;#8217;s core services. It is implemented in Java using WebSphere Liberty. The source is available on GitHub. The public REST API is browsable with Swagger. What follows is a very description of how the internals of the map service work.
API, Language, and RuntimeThe Map is a Java-based service. It uses Java 8, and relies on Java EE 7 technologies like JAX-RS 2.0.
We built the Map using WebSphere Liberty, in a Swagger-first manner using Liberty&amp;#8217;s apiDiscovery-1.</description></item><item><title>The Sweep</title><link>/architecture/the-sweep.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/architecture/the-sweep.html</guid><description/></item><item><title>Marco? Polo, Polo, Polo, Polo. (Caching).</title><link>/chronicles/16-caching.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/16-caching.html</guid><description>Time passed&amp;#8230;&amp;#8203; the grue failed to eat us. So we decided to look into Caching.
Overview.There are places in the Game On code where we request data "service to service" and don&amp;#8217;t expect that data to change very often. Additionally, some of the places we request data from, have limits imposed (no more than x requests within y time period). To combat this, we added some of our own little Caches into the code to store the replies, so we didn&amp;#8217;t need to make too many repeat requests.</description></item><item><title>Making a Watson Alchemy Data News Room</title><link>/chronicles/17-watson-news.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/17-watson-news.html</guid><description>This entry in the Chronicles will seem more like deleted scenes from a movie when compared to what has been chronicled so far.
The room I wanted to create was a Watson Alchemy Data API News Room. The details and the code can be found on github
Among other things, what slowed me down a tad bit was trying to look at why a simple string edit to initial values of the room description would cause the tests to fail.</description></item><item><title>Weather Room (Interacting with REST API service)</title><link>/chronicles/18-weather-room.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/chronicles/18-weather-room.html</guid><description>Game On! is desgined as a fun way to explore microservices, right? So our rooms are the microservice and we can write some puzzles, etc for them. But shouldn&amp;#8217;t room vistors be able to interact with other microservices? Maybe outside of Game On!?
I&amp;#8217;m re-learning some programming techniques after being on the operations side of things for quite a long time. So I was excited, challenged, and a little scared to start programming again.</description></item><item><title>NoSQL persistance with Cloudant</title><link>/walkthroughs/advanced/cloudant.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/cloudant.html</guid><description>Where we learn about Persistence via Cloudant.
OverviewThis adventure will take you through the basics of Persistence from a Microservice perspective, using Cloudant as your backing database. You will add simple usage of Cloudant to a Game On room, and will learn about configuring a Cloudant service instance, communicating with it, and how you might use this further within a room.
Why Cloudant ?There are many options for persistence in a microservices architecture, including nosql db&amp;#8217;s, graph db&amp;#8217;s, and regular sql db&amp;#8217;s.</description></item><item><title>JSR-107 Caching</title><link>/walkthroughs/advanced/jsr107-caching.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/jsr107-caching.html</guid><description>Where we learn about Caching, the standards-based way.
OverviewIn this adventure, we&amp;#8217;ll learn about Caching, and will walk through adding Caching support via JSR-107 annotations to a Java-based Game On room.
By the end, we hope you&amp;#8217;ll have an understanding of the value and use that Caching technologies bring to Cloud Native applications and microservices. We&amp;#8217;ll leave you with some suggestions for further improvements to your room, so you can continue to explore the concepts.</description></item><item><title>JSR-107 Caching (Part Two!)</title><link>/walkthroughs/advanced/jsr107-caching-2.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/jsr107-caching-2.html</guid><description>Where we learn that JSR-107 isn&amp;#8217;t just about annotations.
OverviewThis adventure will teach you a little of the JSR-107 API, by walking you through adding a simple item with shared state to a Game On room.
You will come away understanding how to use JSR-107 without the annotations, with additional suggestions for how this could be used further within a room.
Why JSR-107 API?As mentioned over in Part One JSR-107 is an effort to standardise a Java API for Caching.</description></item><item><title>Watson Conversation Service</title><link>/walkthroughs/advanced/watson-conversation.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/watson-conversation.html</guid><description>Where we learn how to integrate Watson Conversation service with a Swift chat room.
OverviewThis adventure will teach you about integrating a Watson Conversation service into your Swift room by walking you through the process of creating your own Watson service in Bluemix and adding integration points to a GameOn room. You will come away having learned a little about using Watson services and there will be suggestions for how you can use this further within a room.</description></item><item><title>Logging using the ELK stack</title><link>/walkthroughs/advanced/elk-stack.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/elk-stack.html</guid><description>Once you&amp;#8217;ve created a room, the next thing you&amp;#8217;ll want to do is figure out how to send the room&amp;#8217;s logs somewhere so that when your room is stopped (and its local filesystem disappears) you don&amp;#8217;t lose your diagnostic data. You also will want to be able to view your logs, and other events, from a dashboard to make it easy to find problems without having to look at each room&amp;#8217;s files one at a time.</description></item><item><title>Istio and Kubernetes</title><link>/walkthroughs/advanced/istio.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/istio.html</guid><description>RequirementsDownload and install the latest Istio releaseAdd Istio to the Kubernetes clusterBring up Game On! with injected sidecarsIn this adventure, we&amp;#8217;ll add Istio to the Kubernetes cluster running our core game services, to see what it does and how it works. So we don&amp;#8217;t make a mess of our configration with, and without, Istio, we&amp;#8217;ll be using automatic sidecar injection.
RequirementsA cluster configured and working with GO!, per Running with Kubernetes</description></item><item><title>Testing Social Login apps</title><link>/walkthroughs/advanced/test-sso-login.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/test-sso-login.html</guid><description>OverviewHow does this work ?Why do I need my own Social Login apps ?Adding your own Social Login app (Facebook).How to create your own Social Login app, and configure it to use with the game locally.
OverviewHow does this work ?Why do I need my own Social Login apps ?Adding your own Social Login app (Facebook). OverviewWhat&amp;#8217;s a Social Login App? I thought this section was for Game On?
Game On allows players to identify themselves via third party services, such as Facebook, Twitter, etc.</description></item><item><title>Create a room from scratch</title><link>/walkthroughs/advanced/room-from-scratch.html</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/walkthroughs/advanced/room-from-scratch.html</guid><description>Where we learn about the things a room must be, to be a room.
OverviewThis adventure will teach you about the responsibilities a room has from a protocol perspective within Game On. This information will be handy if you are looking to understand what makes a room a room, or if you are planning on creating your own room from scratch in a language we haven&amp;#8217;t provided a sample for. (If you do create one, we&amp;#8217;d be happy to fork from your repo and offer it as the official sample for a Game On room in that language).</description></item><item><title>Blog posts by tag</title><link>/tags/</link><pubDate>Fri, 15 Jan 2021 11:41:15 -0500</pubDate><guid>/tags/</guid><description/></item><item><title>Blog archive</title><link>/archive/</link><pubDate>Tue, 03 Mar 2020 17:29:15 -0500</pubDate><guid>/archive/</guid><description/></item><item><title>Advanced KubecCtl</title><link>/2018/10/02/kubernetes-status.html</link><pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate><guid>/2018/10/02/kubernetes-status.html</guid><description>We've been heads down figuring out how to take the work we did for Game On! on Kubernetes, and make it even simpler for users to get started.
So our resident techno-wizards have come up with a pile of scripts to help orchestrate the deploy onto K8S, and do some of the config and setup and boring backgroundy stuff that's required to get a polyglot microservice app up and running in your cluster.</description></item><item><title>Moving GameOn to Kubernetes</title><link>/2018/01/11/gameon-kubernetes.html</link><pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate><guid>/2018/01/11/gameon-kubernetes.html</guid><description>Game On! and Kubernetes Here at Game On! central, we've been considering how to run on Kubernetes for quite some time, and during a pause in the recent Holiday Season, we had a chance to add Kubernetes support allowing you to run the core services locally.
This work partly builds on an earlier attempt to bring Game On! to Kubernetes back in May last year. We learnt a few lessons from that attempt, and like to think this attempt is a little cleaner.</description></item><item><title>Climbing inside your code: A unique look at the game</title><link>/2017/11/02/climbing-inside-your-code.html</link><pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate><guid>/2017/11/02/climbing-inside-your-code.html</guid><description>Long long ago, in a land far far away (also known as QCon San Francisco, 2016), I met John Voorhees and Avik Das from Primitive, a small startup building VR tools that allow you to visualize your code in an immersive way.
We were also talking about Game On!, because we're about helping you experiment with new technologies and concepts in a differently immersive way.
They scanned and built a visualization of the core game services, and brought it to JavaOne!</description></item><item><title>Lagom gets in the game at JavaOne 2017</title><link>/2017/10/31/lagom-gets-in-the-game.html</link><pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate><guid>/2017/10/31/lagom-gets-in-the-game.html</guid><description>JavaOne was a month ago! No way! Time sure flies.
Our lab with Lightbend was an excellent adventure, complete with the exciting, heart-pounding, last-minute rush to get the materials working end to end. I don't know about you, but that last minute hacking stuff is why I love what I do.
I enjoyed working with the Lightbenders; they're a great team, with solid ideas around how to build reactive applications. What we demonstrated in the lab barely scratched the surface of what you can do with their framework.</description></item><item><title>Devops Days in Raleigh</title><link>/2017/10/16/devops-days-in-raleigh.html</link><pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate><guid>/2017/10/16/devops-days-in-raleigh.html</guid><description>Venu Beyagudem, Jarek Gawor, Ranjan Kumar, and I (Heather Saunders) brought Game On! for its debut at DevOps Days in Raleigh, NC in early September.
DevOps days is a series of conferences across the world that covers topics of software development, IT infrastructure, and of course the DevOps principals that connect them and make them tick. Topics for speeches range from monitoring tool selection, to organizational culture. If you’re interested in seeing if DevOps days is coming near you, check out https://www.</description></item><item><title>Spring Room!</title><link>/2017/10/10/sample-room-spring.html</link><pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate><guid>/2017/10/10/sample-room-spring.html</guid><description>We have a new sample room written in Java with the Spring framework:
sample-room-spring the room up and running This post is a brief overview of the creation process.
Jumpstart with code gen Using this guide, we made a Spring microservice starter that could be deployed to Bluemix with just a few commands:
{% highlight shell_session %} $ bx dev create ? Select a pattern:
Web App Mobile App Backend for Frontend Microservice MFP Enter a number&amp;gt; 4 ?</description></item><item><title>Simplified Docker Compose for local development</title><link>/2017/09/22/simplified-docker-compose-for-local-development.html</link><pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate><guid>/2017/09/22/simplified-docker-compose-for-local-development.html</guid><description>We now have a special branch in the gameon repository that contains a snapshot of a smooth end-to-end local development flow with docker-compose.
1 2 3 &amp;gt; git clone https://github.com/gameontext/gameon.git &amp;gt; cd gameon &amp;gt; ./go-admin.sh up TA-DA!!
Yes, yes. Kubernetes is next, we promise. But with this revision of the Docker Compose path, we dropped a lot of complexity (bye, Amalgam8!) and created a simplified path for getting started.</description></item><item><title>Headed to JavaOne 2017!</title><link>/2017/09/12/headed-to-javaone.html</link><pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate><guid>/2017/09/12/headed-to-javaone.html</guid><description>That's right, Game On! is going back to JavaOne this year!
Frenetic activity has ensued (wow, does this feel familiar), as we prepare for the conference. If you're a frequent visitor, there may be some bumps as we clean things up!
Both a Hands-on Lab and a general session feature the game. Be sure to put them on your schedule!
Introduction to Reactive Systems [HOL7896]
In this two-hour workshop, IBM and Lightbend are teaming up to introduce you to developing reactive microservices on Kubernetes.</description></item><item><title>We have a Scala Room!</title><link>/2017/08/06/sample-scala-room.html</link><pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate><guid>/2017/08/06/sample-scala-room.html</guid><description>&lt;p>What follows is the stream-of-conciousness and research that lead up to our newest sample room!&lt;/p>
&lt;h2 id="tldr">tl;dr&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="/walkthroughs/advanced/room-from-scratch.html">advanced adventures&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://github.com/gameontext/sample-room-scala">sample-room-scala&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://134.168.52.95:9000/">the room up and running&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="day-0">Day 0&lt;/h2>
&lt;p>So for me 2017/18 is going to include adventures in polyglot.&lt;/p>
&lt;blockquote>
&lt;p>This will include but will not be only restricted to
&lt;code>Kotlin&lt;/code>,&lt;code>Prolog&lt;/code>, &lt;code>Erlang&lt;/code>, &lt;code>Racket&lt;/code>, &lt;code>Haskell&lt;/code>, &lt;code>Closure&lt;/code>, &lt;code>Scala&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="day-1">Day 1&lt;/h2>
&lt;h3 id="decide-on-tooling">Decide on tooling.&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://www.scala-lang.org">scala&lt;/a> is the language.&lt;/li>
&lt;li>&lt;a href="http://www.scala-sbt.org/">sbt&lt;/a> is the build tool.&lt;/li>
&lt;li>&lt;a href="http://www.foundweekends.org/giter8/">giter8&lt;/a> to set up starter directories.&lt;/li>
&lt;li>&lt;a href="https://www.playframework.com/">play&lt;/a> is the Websocket Framework.&lt;/li>
&lt;li>&lt;a href="http://ensime.org">ensime&lt;/a> is the plugin for emacs.
&lt;ul>
&lt;li>&lt;code>play&lt;/code> has a &lt;a href="https://www.playframework.com/documentation/2.6.x/ScalaWebSockets">web socket api&lt;/a>&lt;/li>
&lt;li>&lt;code>giter8&lt;/code> has a &lt;a href="https://github.com/foundweekends/giter8/wiki/giter8-templates">starter template&lt;/a> for &lt;code>play&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ensime&lt;/code> looks fun as a development environment.&lt;/li>
&lt;/ul>
&lt;h3 id="learn-to-stop-hating-and-love-regexes">Learn to stop hating and love regexes&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="n">scala&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sample&lt;/span>
&lt;span class="n">res69&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="n">roomHello&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">roomId&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="err">&amp;#34;&lt;/span>&lt;span class="kt">username&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="s">&amp;#34;userId&amp;#34;&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="err">&amp;#34;&lt;/span>&lt;span class="kt">&amp;lt;&lt;/span>&lt;span class="kt">userId&lt;/span>&lt;span class="kt">&amp;gt;&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="s">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="err">1&lt;/span>&lt;span class="kt">|&lt;/span>&lt;span class="err">2&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">scala&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pattern&lt;/span>
&lt;span class="n">res70&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">scala&lt;/span>&lt;span class="kt">.&lt;/span>&lt;span class="kt">util&lt;/span>&lt;span class="kt">.&lt;/span>&lt;span class="kt">matching&lt;/span>&lt;span class="kt">.&lt;/span>&lt;span class="kt">Regex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">\w&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="kt">^&lt;/span>,&lt;span class="o">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">scala&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="n">pattern&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">sample&lt;/span>
&lt;span class="n">target&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">roomHello&lt;/span>
&lt;span class="n">id&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">roomId&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">payload&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="o">=&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="err">&amp;#34;&lt;/span>&lt;span class="kt">username&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="s">&amp;#34;userId&amp;#34;&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="err">&amp;#34;&lt;/span>&lt;span class="kt">&amp;lt;&lt;/span>&lt;span class="kt">userId&lt;/span>&lt;span class="kt">&amp;gt;&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="s">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="err">1&lt;/span>&lt;span class="kt">|&lt;/span>&lt;span class="err">2&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Room on a chip</title><link>/2017/07/18/room-on-a-chip.html</link><pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate><guid>/2017/07/18/room-on-a-chip.html</guid><description>&lt;p>&lt;a href="https://gameontext.org/">Game On!&lt;/a> is a fun little text adventure written using a Microservice architecture. It's also extensible, allowing users to write their own &amp;lsquo;Rooms&amp;rsquo; (locations within the text adventure world), that run as Microservices, in the cloud, on their own systems, etc.&lt;/p>
&lt;p>I've played with Arduino's and Raspberry Pi's, and similar for quite some time. I tried having an Arduino read data from a Floppy Drive, which was fun, and ultimately led to &lt;a href="http://hackaday.com/2012/03/31/floppy-autoloader-takes-the-pain-out-of-archiving-5000-amiga-disks/">a crazy floppy disk autoloader&lt;/a>. From there, I ended up moving on from Arduino to the Maple, then from there to a Teensy 3.0, and most recently, a rather fun little collection of boards based around a Chip known as the &lt;a href="https://en.wikipedia.org/wiki/ESP8266">ESP8266&lt;/a>&lt;/p>
&lt;p>&lt;img src="http://bit.ly/2tAIOE8" alt="esp8266 board">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>There are some nice things about one of the ESP8266 boards I had (&lt;a href="http://bit.ly/2u3bsQg">Witty Cloud / GizWits&lt;/a>):&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>you program it using the Arduino API,&lt;/li>
&lt;li>it has built in WiFi, 4MB of flash to store your code, 64k of instruction ram, and 96k of data ram to play with.&lt;/li>
&lt;li>it runs at 80mhz or so&lt;/li>
&lt;li>it has an LED light that can change color&lt;/li>
&lt;li>it has a light sensor&lt;/li>
&lt;/ul>
&lt;p>That's pretty impressive for something that costs around 5$ shipped.&lt;/p>
&lt;p>When you know there are Arduino JSON libraries, and Arduino WebSocket libraries that can run on it, you start wondering: is it possible to host a Room for Game On on an ESP8266 ?&lt;/p>
&lt;p>I had a spare moment at a weekend, so decided to find out! =)&lt;/p></description></item><item><title>Swift and Watson Conversation Service</title><link>/2017/04/24/swift-and-watson.html</link><pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate><guid>/2017/04/24/swift-and-watson.html</guid><description>Thanks to @jkingoliver, we have a new advanced adventure combining Swift with Watson! This room uses the Watson Conversation Service to create a sandwich shop.
Create a Game On! Room in Swift Integrate Watson Conversation Service Go play!</description></item><item><title>Local development with Vagrant</title><link>/2017/03/21/vagrant-support.html</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate><guid>/2017/03/21/vagrant-support.html</guid><description>Setting up the core game services locally can be a tricky business. If you don't fancy installing our core game services and dependencies on your most favorite dev box, have a look at our Vagrant project clone the gameon repository, cd gameon, and run vagrant up, which will set up a virtual machine ready for local development.
Go play!
*Edit 2017-09-13: As noted above, using Vagrant for local development is now even easier.</description></item><item><title>Using JSR-107 Caching in Java-based rooms</title><link>/2017/03/06/jsr107-caching.html</link><pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate><guid>/2017/03/06/jsr107-caching.html</guid><description>Caching is one of those awkward bits of function you can totally avoid adding when first creating a bit of code. Everything will work just fine during your initial testing, but worries start to creep in when you start to consider what happens when running at scale: will remote services be invoked too frequently? And what happens to session data when processes are added or removed to accommodate changes in load?</description></item><item><title>What's the weather like?</title><link>/2017/03/05/checking-the-weather.html</link><pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate><guid>/2017/03/05/checking-the-weather.html</guid><description>@rstephenrrtx has published a new chronicle relating his experience building a room that checks the weather using IBM Weather Company's REST APIs:
Weather Room (Interacting with REST API service)</description></item><item><title>Using Watson Alchemy Data API to create a News room</title><link>/2017/02/21/watson-news.html</link><pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate><guid>/2017/02/21/watson-news.html</guid><description>@bradleyap has published a new chronicle relating his experience using the Watson Alchemy Data API to create a news room:
Making a Watson Alchemy Data News Room</description></item><item><title>Adding items (and interest) to your room</title><link>/2017/02/15/room-items.html</link><pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate><guid>/2017/02/15/room-items.html</guid><description>Finally! An adventure dedicated solely to making your room more awesome and interesting. This adventure focuses solely on game protocol and how to enhance your room implementation.
Advanced Adventure for Game On Room Items Go play!</description></item><item><title>Creating a room from scratch</title><link>/2017/02/13/room-from-scratch.html</link><pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate><guid>/2017/02/13/room-from-scratch.html</guid><description>Curious how to write your own room from scratch without a fork/clone? We've got your back, intrepid explorer, behold this adventure written just for you:
Advanced Adventure for room creation from scratch Go play!</description></item><item><title>Game On! at OSCon London 2016</title><link>/2016/10/17/oscon-london.html</link><pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate><guid>/2016/10/17/oscon-london.html</guid><description>Kate and I took Game On! to OSCon London! We spoke about our experiences building the game, and Kate created a new room in Java from scratch and showed the game finding the room, and coping as the service recycled in response to updates.
We met all kinds of nice people, including Casey West, Dawn Foster, and Lorna Mitchell.
Here we are on stage!</description></item><item><title>Game On! at JavaOne 2016</title><link>/2016/09/29/gameon-at-javaone.html</link><pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate><guid>/2016/09/29/gameon-at-javaone.html</guid><description>Last week was JavaOne in San Francisco and a number of us from the WebSphere Microservices squad (@MarkNSweep, @ebullient, @BarDweller, and @pavittr) were able to go. Game On! made a nice showing, complete with a lab, T-shirts, and prizes.
We spoke with hundreds of people over three days. What really comes across with Game On! is how accessible it makes microservices, WebSphere Liberty, and cloud-native development. A retro text adventure is something that almost everyone is familiar with.</description></item><item><title>Cars, Pi cameras and ASCII art&amp;#58; Microservices with Liberty and Game On!</title><link>/2016/05/11/cars-pi-cameras-ascii-art.html</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>/2016/05/11/cars-pi-cameras-ascii-art.html</guid><description>Post recovered from the Liberty development blog. Pictures are missing (we'll find them eventually).
The Liberty microservices team, based in IBM Hursley in the UK, decided to include some ASCII art in Game On!. From there, it was but a short step to driving a remote-controlled car around the floor of the latest WebSphere User Group meeting at IBM Southbank, taking pictures with a Raspberry Pi camera to render as ASCII art.</description></item></channel></rss>